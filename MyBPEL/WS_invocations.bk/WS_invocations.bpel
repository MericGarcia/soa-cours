<!-- WS_invocations BPEL Process [Generated by the Eclipse BPEL Designer]  -->
<!-- Date: Thu Sep 03 16:10:34 CEST 2015 -->

<bpel:process name="WS_invocations"
         targetNamespace="http://fr.keyconslting.ws"
         suppressJoinFailure="yes"
         xmlns:tns="http://fr.keyconslting.ws"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns="http://service1.formation.keyconsulting.fr/" xmlns:ns0="http://service2.formation.keyconsulting.fr/">
    <!-- Import the client WSDL -->
    <bpel:import namespace="http://service2.formation.keyconsulting.fr/" location="HelloWorld2.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
    <bpel:import namespace="http://service1.formation.keyconsulting.fr/" location="HelloWorld.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
	
    <bpel:import location="WS_invocationsArtifacts.wsdl" namespace="http://fr.keyconslting.ws" 
	        importType="http://schemas.xmlsoap.org/wsdl/" />
	        
    <!-- ================================================================= -->         
    <!-- PARTNERLINKS                                                      -->
    <!-- List of services participating in this BPEL process               -->
    <!-- ================================================================= -->         
    <bpel:partnerLinks>
        <!--
        The 'client' role represents the requester of this service. It is 
        used for callback. The location and correlation information associated
        with the client role are automatically set using WS-Addressing.
        -->
        <bpel:partnerLink name="client"
                     partnerLinkType="tns:WS_invocations"
                     myRole="WS_invocationsProvider"
                     partnerRole="WS_invocationsRequester"
                     />
        
        
        <bpel:partnerLink name="WS1" partnerLinkType="tns:WS1PTL" myRole="WS1PTLRole" partnerRole="WS1PTLRole"></bpel:partnerLink>
        <bpel:partnerLink name="WS2" partnerLinkType="tns:WS2PTL" myRole="WS2PTLRole" partnerRole="WS2PTLRole"></bpel:partnerLink>
    </bpel:partnerLinks>
  
    <!-- ================================================================= -->         
    <!-- VARIABLES                                                         -->
    <!-- List of messages and XML documents used within this BPEL process  -->
    <!-- ================================================================= -->         
    <bpel:variables>
        <!-- Reference to the message passed as input during initiation -->
        <bpel:variable name="input"
                  messageType="tns:WS_invocationsRequestMessage"/>
                  
        <!-- Reference to the message that will be sent back to the 
             requester during callback
             -->
        <bpel:variable name="output"
                  messageType="tns:WS_invocationsResponseMessage"/>
        
        

        <bpel:variable name="WS1Response2" messageType="ns:sayHiResponse"></bpel:variable>
        <bpel:variable name="WS1Request2" messageType="ns:sayHi"></bpel:variable>
        <bpel:variable name="WS2Response3" messageType="ns0:sayHiResponse"></bpel:variable>
        <bpel:variable name="WS2Request3" messageType="ns0:sayHi"></bpel:variable>
    </bpel:variables>

    <!-- ================================================================= -->         
    <!-- ORCHESTRATION LOGIC                                               -->
    <!-- Set of activities coordinating the flow of messages across the    -->
    <!-- services integrated within this business process                  -->
    <!-- ================================================================= -->         
    <bpel:sequence name="main">
        
        <!-- Receive input from requestor. 
             Note: This maps to operation defined in WS_invocations.wsdl 
             -->
        <bpel:receive name="receiveInput" partnerLink="client"
                 portType="tns:WS_invocations"
                 operation="initiate" variable="input"
                 createInstance="yes"/>
        <bpel:assign validate="no" name="AssignInPutToSoapRequest">
            
            
            <bpel:copy>
                <bpel:from part="payload" variable="input">
                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                        <![CDATA[tns:input]]>
                    </bpel:query>
                </bpel:from>
                <bpel:to part="payload" variable="input">
                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                        <![CDATA[tns:input]]>
                    </bpel:query>
                </bpel:to>
            </bpel:copy>
            
            
        </bpel:assign>
        
        
        
        <bpel:invoke name="InvokeWS1" partnerLink="WS1" operation="sayHi" inputVariable="WS1Request2" outputVariable="WS1Response2"></bpel:invoke>
        <bpel:invoke name="InvokeWS2" partnerLink="WS2" operation="sayHi" inputVariable="WS2Request3" outputVariable="WS2Response3" portType="ns0:IHelloService2"></bpel:invoke>
        <bpel:assign validate="no" name="AssignOutputToResult">
            
            
        <bpel:copy>
                <bpel:from part="payload" variable="output">
                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                        <![CDATA[tns:result]]>
                    </bpel:query>
                </bpel:from>
                <bpel:to part="payload" variable="output">
                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
                        <![CDATA[tns:result]]>
                    </bpel:query>
                </bpel:to>
            </bpel:copy>
        
        </bpel:assign>
        
        
        
        
        <!-- Asynchronous callback to the requester.
             Note: the callback location and correlation id is transparently handled 
             using WS-addressing.
             -->
        
        <bpel:invoke name="callbackClient" 
                partnerLink="client"
                portType="tns:WS_invocationsCallback"
                operation="onResult" 
                inputVariable="output"
                />
    </bpel:sequence>
</bpel:process>

